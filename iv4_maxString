/*主要思路
（1）引入TreeSet：通过集合快速的找到所有出现的字符串
（2）引入ArrayList：为了快速排序，再通过StringBuffer生成排序后的字符串
（3）通过String API 中的基本方法indexof，lastindexof来计算TreeSet中每个字符出现的最大值
（4）如果出现相同的，则把相同的都记录在一个列表中（maxlist）
（5）记录第一个出现次数最多的字符（为了计算多个字符相同的情况）
（6）计算最大字符串列表中哪些才是真正出现次数最多的。
*/

import java.io.*;
import java.util.*;
public class Test {
	public static void main(String[] args) throws IOException {
		String input="asdfbhgcahsgfdygyebh";
		new Test().doString(input);
	}
public void doString(String input)
{
	int i;
	ArrayList list=new ArrayList();
	TreeSet set=new TreeSet();
	
	char[] ch=input.toCharArray();//toCharArray()将字符串对象中的字符分解成字符数组	
	for(i=0;i<ch.length;i++)
	{
		list.add(String.valueOf(ch[i]));//String.valueOf（）
    set.add(String.valueOf(ch[i]));
	}
	
	Collections.sort(list);//对list按26个字母顺序进行排序
  System.out.println(list);
	
	StringBuffer sb=new StringBuffer();
	for(i=0;i<list.size();i++)
	{
		sb.append(list.get(i));
	}
	input= sb.toString();
	
	ArrayList maxlist=new ArrayList();//定义一个最大字符串数组
  int max=0;
	String maxString ="";
	
	Iterator its=set.iterator();//定义一个迭代器
  while(its.hasNext())
	{
		String str=String.valueOf(its.next());//its.next()用法
    int first= list.indexOf(str);
		int last = list.lastIndexOf(str);//indexof用法	
    int value=last-first+1;
		if(value>max)
		{
			max=value;
			maxString =str;
			maxlist.add(str);
		}
		else if(value==max)//为了能够打印次数相同的最大字符
    {
			maxlist.add(str);
		}
	}
	
	int index=0;
	for(i=0;i<maxlist.size();i++)
		if(maxlist.get(i).equals(maxString))
			{
			index=i;
			break;
			}
	
	for(i=index;i<maxlist.size();i++)
		{
		System.out.print(maxlist.get(i)+" ");
		}
    System.out.println();
    System.out.println(max);
  }
}
